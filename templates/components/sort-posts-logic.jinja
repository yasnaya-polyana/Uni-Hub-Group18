<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Sort script loaded.');

    const sorter = document.getElementById('post-sorter');
    const postsContainer = document.getElementById('community-posts-list');
    
    console.log('Sorter element:', sorter);
    console.log('Posts container element:', postsContainer);

    if (sorter && postsContainer) {
      console.log('Sorter and container found. Adding event listener.');

      sorter.addEventListener('change', function() {
        const sortType = this.value;
        console.log('Sort type changed to:', sortType);

        const postElements = Array.from(postsContainer.querySelectorAll('[data-timestamp]'));

        console.log(`Found ${postElements.length} post elements to sort.`);
        if (postElements.length === 0) {
          console.warn('No post elements with data-timestamp found inside the container.');
          return;
        }

        if (postElements.length > 0) {
          console.log('Data attributes of first post:', JSON.stringify(postElements[0].dataset));
        }

        postElements.sort((a, b) => {
          let valA, valB;
          try {
            switch (sortType) {
              case 'oldest':
                valA = new Date(a.dataset.timestamp || 0);
                valB = new Date(b.dataset.timestamp || 0);
                if (isNaN(valA.getTime())) valA = new Date(0);
                if (isNaN(valB.getTime())) valB = new Date(0);
                return valA - valB;
              case 'most_likes':
                valA = parseInt(a.dataset.likes || '0', 10);
                valB = parseInt(b.dataset.likes || '0', 10);
                return valB - valA;
              case 'most_comments':
                valA = parseInt(a.dataset.comments || '0', 10);
                valB = parseInt(b.dataset.comments || '0', 10);
                return valB - valA;
              case 'most_reposts':
                valA = parseInt(a.dataset.reposts || '0', 10);
                valB = parseInt(b.dataset.reposts || '0', 10);
                return valB - valA;
              case 'newest':
              default:
                valA = new Date(a.dataset.timestamp || 0);
                valB = new Date(b.dataset.timestamp || 0);
                if (isNaN(valA.getTime())) valA = new Date(0);
                if (isNaN(valB.getTime())) valB = new Date(0);
                return valB - valA;
            }
          } catch (e) {
            console.error("Error during sort comparison:", e);
            return 0;
          }
        });

        console.log('Timestamps after sorting:', postElements.map(p => p.dataset.timestamp));

        console.log('Clearing container and appending sorted posts...');
        postsContainer.innerHTML = '';
        postElements.forEach(post => postsContainer.appendChild(post));
        console.log('Sorting complete.');
      });

    } else {
      if (!sorter) {
        console.error('Sort logic: Sorter element with ID "post-sorter" not found.');
      }
      if (!postsContainer) {
        console.error('Sort logic: Target container not found with ID "community-posts-list".');
      }
    }
  });
</script> 